*** AOP(Aspect Oriented Programming)의 정의 ***
 - 여러 객체에 공통으로 적용할 수 있는 기능을 구분함으로써 재사용을 높여주는 프로그래밍 기법입니다.
 - AOP이 핵심 기능과 공통 기능의 구현을 분리함으로써 핵심 기능을 구현한 코드의 수정 없이 공통 기능을 적용할 수 있게 만들어 줍니다.
 - 애플리케이션을 개발하기 위하여 관심을 가지고 구현 해야 하는 각각의 기능들을 관심 사항(Concern)이라 합니다.
 
 							AOP 용어
 =>	1)	공통 기능의 코드 : 횡단(공통) 관심 사항(cross-cutting concern) 예) 로깅, 트랜잭션 처리
 	2) 	핵심 기능의 코드 : 핵심 관심 사항(core concern)
 	
 	
*** AOP의 주요 용어 ***
1. 타겟(Target) : 핵심 기능이 구현된 객체로 공통 기능의 적용 대상이 되는 객체를 의미합니다.
	예) CommentServiceImpl

2. 조인포인트(Joinpoint)
	Target이 가진 메서드를 의미하며 조인포인트 중에서 포인트 컷이 선택됩니다. 
	예) 5개의 메서드 존재
		
3. 포인트 컷(Pointcut)
	Target이 가진 메서드가 조인포인트라면 포인트 컷은 필터링된 조인포인트를 의미합니다.
	
		이렇게 수많은 비즈니스 메소드 중에서 우리가 원하는 특정 메서드에서만 
		횡단 관심에 해당하는 공통 기능을 수행시키기 위해서 포인트 컷이 필요합니다.
		포인트 컷을 이용하면 메서드가 포함된 클래스와 패키지는 물론이고 메서드 시그니처까지 
		정확하게 지정할 수 있습니다.
		예) getListCount, getCommentsList 두 개만 log.before() 선언
		
	1) 포인트 컷 표현식 사용방법
		표현식을 통해서 포인트 컷을 필터링할 수 있습니다.
		사용방법은 아래와 같습니다.
		
	  "execution(* com.naver.myhome4..*Impl.get*(..))"
	  
	  	*		com.naver.myhome4..		*Impl		.		get*(..)
	 리턴타입			패키지 경로				클래스명		.		메서드명 및 매개변수 
	 
	  => com.naver.myhome4 패키지로 시작하는 클래스 중에서 Impl로 끝나는 클래스의 
	  	 get으로 시작하는 모든 메서드만 pointcut으로 설정합니다.
	  	 
	2) 표현식
		(1) 리턴 타입의 경우
			*	  :	모든 리턴 타입
			void  :	리턴 타입이 void인 메서드 선택
			!void : 리턴 타입이 void가 아닌 메서드 선택
		
		(2) 패키지 경로
			com.naver.myhome4		:		com.naver.myhome4 패키지만 선택 
			com.naver.myhome4..		: 		com.naver.myhome4 패키지로 시작하는 모든 패키지 선택
			
		(3) 클래스 지정	
			ServiceImpl		:	ServiceImpl	클래스 선택
			*Impl			:	클래스 이름이 Impl로 끝나는 클래스만 선택
		
		(4)  .		:	클래스와 메서드를 구분합니다.
		
		(5) 메서드 지정
			*			: 모든 메서드 선택
			get*		: 메서드 이름이 get으로 시작하는 모든 메서드 선택
		
		(6) 매개변수 지정
			()			  : 매개변수가 존재하지 않는 것을 의미
			(..)		  : 매개변수의 개수와 타입에 제약이 없음을 의미
			(*)			  : 반드시 1개의 매개변수를 가지는 메서드만 선택
			(Integer, ..) : 한 개 이상의 매개변수를 가지되, 첫 번째 매개변수의 타입이 Integer인 메서드만 선택
			(Integer, *)  : 반드시 두 개의 매개변수를 가지되, 첫 번째 매개변수의 타입이 Integer인 메서드만 선택
			
4.	어디바이스(Advice)
	 * 횡단 관심에 해당하는 공통 기능의 코드를 의미합니다.
	 * 독립된 클래스의 메서드로 작성됩니다.
	 * 어드바이스로 구현된 메서드가 언제 동작할지 스프링 설정 파일을 통해서 지정할 수 있습니다.
		
	동작시점 :
		1) Around  : 대상 객체(target)의 메서드 실행 전, 후 발생 시점에 공통 기능을 실행하는 데 사용됩니다.
		2) Before  : 대상 객체의 메서드 호출 전에 공통 기능을 실행합니다. 
		3) After   : 대상 객체의 메서드를 실행하는 도중에 익셉션이 발생했는지의 여부에 상관없이 메서드 실행 후 
					 공통 기능을 실행합니다.
		4) After Returning : 대상 객체의 메서드 호출이 정상적으로 종료된 후에 실행합니다.
		5) After Throwing  : 대상 객체의 메서드를 수행하다가 예외가 발생할 때 동작합니다.	
		
5. 위빙(Weaving)
	* 위빙은 포인트 컷으로 지정한 핵심 관심 메서드가 호출될 때 어드바이스에 해당하는 횡단 관심 메서드가 삽입되는 과정을 의미합니다.
	
	* 이 위빙을 통해서 비즈니스 메서드를 수정하지 않고도 횡단 관심에 해당하는 기능을 추가하거나 변경할 수 있습니다.
	
	* 방식 : 컴파일 타임 위빙, 로딩 타임 위빙, 런타임 위빙
			1) 컴파일 시점에 코드에 공통 기능을 추가하는 방법입니다.
			2) 클래스 로딩 시점에 바이트 코드에 공통 기능을 추가하는 방법입니다.
			3) 런타임에 공통 기능을 추가하는 방법입니다. (스프링이 제공하는 AOP 방식)		
		
6. 애스팩트(Aspect) 또는 어드바이저(Advisor)
	* 여러 객체에 공통으로 적용되는 기능을 분리하여 작성한 클래스입니다.
	* AOP의 핵심은 Aspect입니다.
	 이것은 포인트컷과 어드바이스의 결합으로 어떤 포인트컷 메서드에 대해서 어떤 어드바이스를 실행할지 결정합니다.
	 이 애스팩트 설정에 따라 AOP의 동작 방식이 결정됩니다.	
		
AOP 주요용어
Aspect (애스팩트)
- AOP의 단위가 되는 횡단관심사를 의미
- ex) '로그를 출력한다', '예외를 처리한다', '트랜잭션을 관리한다'
JoinPoint (조인포인트)
- 횡단관심사가 실행될 지점이나 시점 (메서드 실행이나 예외 발생 등)
- 스프링 프레임워크의 AOP에서는 메서드 단위로 JoinPoint를 잡는다
Advice (어드바이스)
- 횡단관심사를 실제로 처리하는 부분, 특정 JoinPoint에서 실행되는 코드
- Before, After Returning, After Throwing, After, Around 가 있다 (밑에서 설명)
Pointcut (포인트컷)
- 여러 JoinPoint 중 실제로 Advice를 적용할 곳을 선별하기 위한 표현식(expression)
- 일종의 JoinPoint의 그룹이라고 볼 수 있음
- 스프링 AOP에서는 Pointcut을 정의할 때 XML 기반 설정 방식으로 Bean 정의 파일을 만들거나, Annotation 기반 설정 방식으로 소스코드에 주석 형태로 정의
Weaving (위빙)
- 애플리케이션의 적절한 시점에 Aspect를 적용하는 것을 말함
- 스프링 AOP는 기본적으로 실행시점에 위빙한다
Target (타깃)
- Aspect가 적용된 객체
- Advice Object라고도 한다		
		
			
		